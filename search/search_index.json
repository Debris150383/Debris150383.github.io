{"config":{"indexing":"full","lang":["ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u524d\u8a00 \u00b6 \u5982\u679c\u53ea\u4fdd\u8bc1\u81ea\u5df1\u80fd\u770b\u5f97\u61c2\uff0c\u5927\u6982\u53ef\u4ee5\u8bb0\u5f55\u4e0b\u53bb\u3002","title":"\u524d\u8a00"},{"location":"#_1","text":"\u5982\u679c\u53ea\u4fdd\u8bc1\u81ea\u5df1\u80fd\u770b\u5f97\u61c2\uff0c\u5927\u6982\u53ef\u4ee5\u8bb0\u5f55\u4e0b\u53bb\u3002","title":"\u524d\u8a00"},{"location":"open_cv/","text":"opencv \u00b6 \u57fa\u672c \u00b6 \u8868\u793a\u65b9\u6cd5 \u00b6 HSV\uff08Hue\uff0cSaturation\uff0cValue\uff09\u662f\u53e6\u4e00\u79cd\u8272\u5f69\u7a7a\u95f4\uff0c\u5176\u4e2d\u7684\u989c\u8272\u7ec4\u6210\u5143\u7d20\u66f4\u63a5\u8fd1\u4eba\u7c7b\u5bf9\u989c\u8272\u7684\u611f\u77e5\uff1a Hue\uff08\u8272\u8c03\uff09\uff1a\u8fd9\u662f\u6211\u4eec\u901a\u5e38\u610f\u4e49\u4e0a\u7684\u989c\u8272\u540d\u79f0\uff0c\u5982\u7ea2\u8272\u3001\u84dd\u8272\u7b49\u3002 Saturation\uff08\u9971\u548c\u5ea6\uff09\uff1a\u8fd9\u662f\u989c\u8272\u7684\u9c9c\u8273\u7a0b\u5ea6\uff0c\u989c\u8272\u4ece\u6700\u9c9c\u8273\u5230\u6700\u7070\u6697\u3002 Value\uff08\u4eae\u5ea6\uff09\uff1a\u989c\u8272\u4ece\u6700\u4eae\uff08\u767d\u8272\uff09\u5230\u6700\u6697\uff08\u9ed1\u8272\uff09 \u4e0d\u540c\u7684\u5e93\u7684H\uff0cS\uff0cV\u7684\u8868\u793a\u65b9\u5f0f\u548c\u8303\u56f4\u4e0d\u540c \u989c\u8272 H \u8303\u56f4 S \u8303\u56f4 V \u8303\u56f4 \u7ea2\u8272 0-10, 160-180 50-255 50-255 \u6a59\u8272 11-25 50-255 50-255 \u9ec4\u8272 26-35 50-255 50-255 \u7eff\u8272 36-85 50-255 50-255 \u9752\u8272 86-99 50-255 50-255 \u84dd\u8272 100-130 50-255 50-255 \u7d2b\u8272 131-159 50-255 50-255 \u767d\u8272 \u4e0d\u9002\u7528 0-40 200-255 \u9ed1\u8272 \u4e0d\u9002\u7528 0-255 0-50 \u4e0a\u56fe\u662fopencv\u7684\u5404\u4e2a\u989c\u8272hsv\u8303\u56f4\uff0c\u4e3aGPT4\u7ed9\u51fa\u3002\u51c6\u786e\u7684\u8303\u56f4\u672a\u8003\u8bc1\u3002 \u51e0\u79cd\u8868\u793a\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362; \u5728cv2\u4e2d\u5229\u7528 cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) \u4e4b\u7c7b\u7684\u65b9\u6cd5\u5373\u53ef\uff1b \u4eceBGR\u5230\u7070\u5ea6\u6216\u8005HSV\u7684\u8f6c\u6362\u662f\u901a\u9053\u52a0\u6743\u8f6c\u6362\uff0c\u5230\u4e86\u7070\u5ea6\u7531\u4e8e\u53ea\u6709\u4e00\u4e2a\u503c\uff0c\u4ece\u7070\u5ea6\u8f6c\u6362\u4e3aBGR\u4f1a\u628a\u8fd9\u4e2a\u503c\u590d\u5236\u62103\u4efd\u7ed9\u4e09\u4e2a\u901a\u9053\u3002 \u793a\u4f8b rgb_color = np.uint8([[[r, g, b]]]) hsv_color = cv2.cvtColor(rgb_color, cv2.COLOR_RGB2HSV) ROI \u00b6 \u793a\u4f8b img [ 0 : 100 , :, :] \u6ce8\u610f\uff1a\u5bf9\u4e8e\u5750\u6807\u800c\u8a00\uff0cx\u6b63\u5411\u5411\u53f3\uff0cy\u6b63\u5411\u5411\u4e0b\uff1b\u4e0e\u884c\u5217\u4e0d\u5bf9\u5e94 ROI \u4e0e \u4f4d\u8fd0\u7b97 \u00b6 \u653e\u7f6elogo img1 = cv . imread ( 'messi5.jpg' ) img2 = cv . imread ( 'opencv-logo-white.png' ) # \u6211\u60f3\u628alogo\u653e\u5728\u5de6\u4e0a\u89d2\uff0c\u6240\u4ee5\u6211\u521b\u5efa\u4e86ROI rows , cols , channels = img2 . shape roi = img1 [ 0 : rows , 0 : cols ] # \u73b0\u5728\u521b\u5efalogo\u7684\u63a9\u7801\uff0c\u5e76\u540c\u65f6\u521b\u5efa\u5176\u76f8\u53cd\u63a9\u7801 img2gray = cv . cvtColor ( img2 , cv . COLOR_BGR2GRAY ) ret , mask = cv . threshold ( img2gray , 10 , 255 , cv . THRESH_BINARY ) mask_inv = cv . bitwise_not ( mask ) # \u73b0\u5728\u5c06ROI\u4e2dlogo\u7684\u533a\u57df\u6d82\u9ed1 img1_bg = cv . bitwise_and ( roi , roi , mask = mask_inv ) # \u4ec5\u4ecelogo\u56fe\u50cf\u4e2d\u63d0\u53d6logo\u533a\u57df img2_fg = cv . bitwise_and ( img2 , img2 , mask = mask ) # \u5c06logo\u653e\u5165ROI\u5e76\u4fee\u6539\u4e3b\u56fe\u50cf dst = cv . add ( img1_bg , img2_fg ) img1 [ 0 : rows , 0 : cols ] = dst \u56fe\u50cf\u7ed8\u5236 \u00b6 cv2.circle \u00b6 \u8be5\u51fd\u6570\u53ef\u4ee5\u5728\u7ed9\u5b9a\u56fe\u50cf\u4e0a\u7ed8\u5236\u4e00\u4e2a\u5706\u5f62\uff0c\u5e76\u6307\u5b9a\u5706\u5fc3\u3001\u534a\u5f84\u3001\u989c\u8272\u548c\u7ebf\u6761\u7c97\u7ec6\u7b49\u53c2\u6570\u3002 \u8bed\u6cd5\u5982\u4e0b cv2 . circle ( image , center , radius , color , thickness ) \u53c2\u6570\u89e3\u91ca\uff1a image : \u8981\u5728\u5176\u4e0a\u7ed8\u5236\u5706\u7684\u56fe\u50cf\u3002 center : \u5706\u5fc3\u7684\u5750\u6807 (x, y) \uff0c\u5176\u4e2d (x, y) \u662f\u6574\u6570\u503c\u3002 radius : \u5706\u7684\u534a\u5f84\uff0c\u4e3a\u6b63\u6574\u6570\u503c\u3002 color : \u5706\u7684\u989c\u8272\uff0c\u53ef\u4ee5\u662f\u5355\u4e2a\u6574\u6570\u503c\u3001\u5143\u7ec4 (B, G, R) \u6216\u8005 (B, G, R, A) \uff08\u5bf9\u4e8e\u5e26\u6709 alpha \u901a\u9053\u7684\u56fe\u50cf\uff09\u3002 thickness : \u7ebf\u6761\u7684\u7c97\u7ec6\uff0c\u9ed8\u8ba4\u4e3a1\uff0c \u8d1f\u6570\u503c\u8868\u793a\u586b\u5145\u6574\u4e2a\u5706 cv2.rectangle \u00b6 OpenCV \u5e93\u4e2d\u7528\u4e8e\u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u77e9\u5f62\u7684\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u5728\u7ed9\u5b9a\u56fe\u50cf\u4e0a\u7ed8\u5236\u4e00\u4e2a\u77e9\u5f62\uff0c\u5e76\u6307\u5b9a\u77e9\u5f62\u7684\u4f4d\u7f6e\u3001\u989c\u8272\u548c\u7ebf\u6761\u7c97\u7ec6\u7b49\u53c2\u6570\u3002 \u8bed\u6cd5\uff1a cv2 . rectangle ( image , start_point , end_point , color , thickness ) \u53c2\u6570\u89e3\u91ca\uff1a start_point : \u77e9\u5f62\u7684\u5de6\u4e0a\u89d2\u70b9\u5750\u6807 (x, y) \uff0c\u5176\u4e2d (x, y) \u662f\u6574\u6570\u503c\u3002 end_point : \u77e9\u5f62\u7684\u53f3\u4e0b\u89d2\u70b9\u5750\u6807 (x, y) \uff0c\u5176\u4e2d (x, y) \u662f\u6574\u6570\u503c\u3002 \u9f20\u6807\u4f5c\u4e3a\u753b\u7b14 \u00b6 import numpy as np import cv2 as cv drawing = False # \u5982\u679c\u6309\u4e0b\u9f20\u6807\uff0c\u5219\u4e3a\u771f mode = True ix , iy = - 1 , - 1 # \u9f20\u6807\u56de\u8c03\u51fd\u6570 def draw_circle ( event , x , y , flags , param ): global ix , iy , drawing , mode if event == cv . EVENT_LBUTTONDOWN : # \u6309\u4f4f\u9f20\u6807\u5de6 drawing = True ix , iy = x , y elif event == cv . EVENT_MOUSEMOVE : if drawing == True : if mode == True : cv . rectangle ( img ,( ix , iy ),( x , y ),( 0 , 255 , 0 ), 0 ) else : cv . circle ( img ,( x , y ), 10 ,( 0 , 0 , 255 ), - 1 ) elif event == cv . EVENT_LBUTTONUP : #\u677e\u5f00 drawing = False if mode == True : cv . rectangle ( img ,( ix , iy ),( x , y ),( 0 , 255 , 0 ), 0 ) else : cv . circle ( img ,( x , y ), 5 ,( 0 , 0 , 255 ), - 1 ) img = np . zeros (( 512 , 512 , 3 ), np . uint8 ) cv . namedWindow ( 'image' ) cv . setMouseCallback ( 'image' , draw_circle ) while ( 1 ): cv . imshow ( 'image' , img ) if cv . waitKey ( 20 ) & 0xFF == 27 : break cv . destroyAllWindows () \u5bf9\u8c61\u8ffd\u8e2a \u00b6 hsv\u8ffd\u8e2a \u00b6 cv.inRange(src, lowrb, upperrb); \u8303\u56f4\u4e4b\u95f4 255 \u5426\u52190 \u793a\u4f8b # \u8f6c\u6362\u989c\u8272\u7a7a\u95f4 BGR \u5230 HSV hsv = cv . cvtColor ( frame , cv . COLOR_BGR2HSV ) # \u5b9a\u4e49HSV\u4e2d\u84dd\u8272\u7684\u8303\u56f4 lower_blue = np . array ([ 110 , 50 , 50 ]) upper_blue = np . array ([ 130 , 255 , 255 ]) # \u8bbe\u7f6eHSV\u7684\u9608\u503c\u4f7f\u5f97\u53ea\u53d6\u84dd\u8272 mask = cv . inRange ( hsv , lower_blue , upper_blue ) # \u5c06\u63a9\u819c\u548c\u56fe\u50cf\u9010\u50cf\u7d20\u76f8\u52a0 res = cv . bitwise_and ( frame , frame , mask = mask ) \u51e0\u4f55\u53d8\u6362 \u00b6 \u7f29\u653e cv . resize ( src , dsize , fx , fy \uff0c interpolation ) # dsize = (width, height) \u200b cv.INTER_LINEAR \uff08\u7ebf\u6027\u63d2\u503c\uff0c\u8fd9\u4e5f\u662f\u9ed8\u8ba4\u503c\uff09\uff0c cv.INTER_NEAREST \uff08\u6700\u8fd1\u90bb\u63d2\u503c\uff09\uff0c cv.INTER_AREA \uff08\u533a\u57df\u63d2\u503c\uff0c\u7528\u4e8e\u56fe\u50cf\u7f29\u5c0f\uff09\uff0c cv.INTER_CUBIC \uff08\u7acb\u65b9\u63d2\u503c\uff0c\u7528\u4e8e\u56fe\u50cf\u653e\u5927\uff09\u7b49\u3002 \u5e73\u79fb rows , cols = img . shape M = np . float32 ([[ 1 , 0 , 100 ],[ 0 , 1 , 50 ]]) dst = cv . warpAffine ( img , M ,( cols , rows )) \u65cb\u8f6c # cols-1 \u548c rows-1 \u662f\u5750\u6807\u9650\u5236 M = cv . getRotationMatrix2D ((( cols - 1 ) / 2.0 ,( rows - 1 ) / 2.0 ), 90 , 1 ) dst = cv . warpAffine ( img , M ,( cols , rows )) \u4eff\u5c04\u53d8\u6362\uff1b\u4fdd\u6301\u5e73\u884c rows , cols , ch = img . shape pts1 = np . float32 ([[ 50 , 50 ],[ 200 , 50 ],[ 50 , 200 ]]) pts2 = np . float32 ([[ 10 , 100 ],[ 200 , 50 ],[ 100 , 250 ]]) #\u4e09\u4e2a\u70b9\u5bf9\u5e94\u4f4d\u7f6e M = cv . getAffineTransform ( pts1 , pts2 ) dst = cv . warpAffine ( img , M ,( cols , rows )) \u900f\u89c6\u53d8\u6362\uff1a\u9700\u8981\u56db\u4e2a\u70b9(\u4e09\u4e2a\u4e0d\u5e94\u8be5\u5171\u7ebf\uff09\uff0c\u4fdd\u6301\u76f4\u7ebf rows , cols , ch = img . shape pts1 = np . float32 ([[ 56 , 65 ],[ 368 , 52 ],[ 28 , 387 ],[ 389 , 390 ]]) pts2 = np . float32 ([[ 0 , 0 ],[ 300 , 0 ],[ 0 , 300 ],[ 300 , 300 ]]) M = cv . getPerspectiveTransform ( pts1 , pts2 ) dst = cv . warpPerspective ( img , M ,( 300 , 300 )) \u6d89\u53ca\u7ebf\u6027\u4ee3\u6570\u77e5\u8bc6\uff1a \u77e9\u9635\u53d8\u6362 threshold \u00b6 cv.threshold cv . threshold ( src , thresh , maxval , type [, dst ]) \u2192 retval , dst \u200b cv.THRESH_TOZERO \uff1a\u5927\u4e8e\u9608\u503c \u4e0d\u53d8 cv.adaptiveThreshold \u81ea\u9002\u5e94 otsu (flag) \u8150\u8680\u4e0e\u81a8\u80c0 \u00b6 \u4fb5\u8680\u7684\u57fa\u672c\u601d\u60f3\u5c31\u50cf\u571f\u58e4\u4fb5\u8680\u4e00\u6837\uff0c\u5b83\u4fb5\u8680\u524d\u666f\u7269\u4f53\u7684\u8fb9\u754c(\u5c3d\u91cf\u4f7f\u524d\u666f\u4fdd\u6301\u767d\u8272)\u3002\u5b83\u662f\u505a\u4ec0\u4e48\u7684\u5462?\u5185\u6838\u6ed1\u52a8\u901a\u8fc7\u56fe\u50cf(\u57282D\u5377\u79ef\u4e2d)\u3002\u539f\u59cb\u56fe\u50cf\u4e2d\u7684\u4e00\u4e2a\u50cf\u7d20(\u65e0\u8bba\u662f1\u8fd8\u662f0)\u53ea\u6709\u5f53\u5185\u6838\u4e0b\u7684\u6240\u6709\u50cf\u7d20\u90fd\u662f1\u65f6\u624d\u88ab\u8ba4\u4e3a\u662f1\uff0c\u5426\u5219\u5b83\u5c31\u4f1a\u88ab\u4fb5\u8680(\u53d8\u62100)\u3002 \u7ed3\u679c\u662f\uff0c\u6839\u636e\u5185\u6838\u7684\u5927\u5c0f\uff0c\u8fb9\u754c\u9644\u8fd1\u7684\u6240\u6709\u50cf\u7d20\u90fd\u4f1a\u88ab\u4e22\u5f03 kernel = np . ones (( 5 , 5 ), np . uint8 ) erosion = cv . erode ( img , kernel , iterations = 1 ) \u81a8\u80c0\u6b63\u597d\u76f8\u53cd\uff0c\u5982\u679c\u5185\u6838\u4e0b\u7684\u81f3\u5c11\u4e00\u4e2a\u50cf\u7d20\u4e3a\u201c 1\u201d\uff0c\u5219\u50cf\u7d20\u5143\u7d20\u4e3a\u201c 1\u201d\u3002\u56e0\u6b64\uff0c\u5b83\u4f1a\u589e\u52a0\u56fe\u50cf\u4e2d\u7684\u767d\u8272\u533a\u57df\u6216\u589e\u52a0\u524d\u666f\u5bf9\u8c61\u7684\u5927\u5c0f\u3002\u901a\u5e38\uff0c\u5728\u6d88\u9664\u566a\u97f3\u7684\u60c5\u51b5\u4e0b\uff0c\u8150\u8680\u540e\u4f1a\u81a8\u80c0\u3002\u56e0\u4e3a\u8150\u8680\u4f1a\u6d88\u9664\u767d\u566a\u58f0\uff0c\u4f46\u4e5f\u4f1a\u7f29\u5c0f\u7269\u4f53\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5bf9\u5176\u8fdb\u884c\u4e86\u6269\u5c55\u3002\u7531\u4e8e\u566a\u97f3\u6d88\u5931\u4e86\uff0c\u5b83\u4eec\u4e0d\u4f1a\u56de\u6765\uff0c\u4f46\u662f\u6211\u4eec\u7684\u76ee\u6807\u533a\u57df\u589e\u52a0\u4e86\u3002\u5728\u8fde\u63a5\u5bf9\u8c61\u7684\u635f\u574f\u90e8\u5206\u65f6\u4e5f\u5f88\u6709\u7528\u3002 dilation = cv . dilate ( img , kernel , iterations = 1 ) \u5148\u8150\u8680\u540e\u81a8\u80c0\uff0c\u6d88\u9664\u566a\u97f3 opening = cv . morphologyEx ( img , cv . MORPH_OPEN , kernel ) \u5148\u81a8\u80c0\u540e\u8150\u8680\uff0c\u5728\u5173\u95ed\u524d\u666f\u5bf9\u8c61\u5185\u90e8\u7684\u5c0f\u5b54\u6216\u5bf9\u8c61\u4e0a\u7684\u5c0f\u9ed1\u70b9\u65f6\u5f88\u6709\u7528\u3002 closing = cv . morphologyEx ( img , cv . MORPH_CLOSE , kernel ) \u4e0d\u540c\u5f62\u72b6\u5185\u6838 cv . getStructuringElement ( cv . MORPH_RECT ,( 5 , 5 )) # \u692d\u5706 cv . getStructuringElement ( cv . MORPH_ELLIPSE ,( 5 , 5 )) cv . getStructuringElement ( cv . MORPH_CROSS ,( 5 , 5 )) \u56fe\u50cf\u68af\u5ea6 \u00b6 \u68af\u5ea6\u6ee4\u6ce2\u5668\u6216\u9ad8\u901a\u6ee4\u6ce2\u5668(flag) laplacian = cv . Laplacian ( img , cv . CV_64F ) sobelx = cv . Sobel ( img , cv . CV_64F , 1 , 0 , ksize = 5 ) sobely = cv . Sobel ( img , cv . CV_64F , 0 , 1 , ksize = 5 ) \u56fe\u50cf\u5e73\u6ed1 \u00b6 cv.filter2D \u8fc7\u6ee4 kernel = np . ones (( 5 , 5 ), np . float32 ) / 25 dst = cv . filter2D ( img , - 1 , kernel ) # -1 \u8868\u793a\u4e0e\u56fe\u50cf\u540c\u6837\u6df1\u5ea6 \u6a21\u7cca blur = cv . blur ( img ,( 5 , 5 )) #\u5185\u68385*5 blur = cv . GaussianBlur ( img ,( 5 , 5 ), 0 ) #\u6807\u51c6\u5dee \u9ad8\u65af\u6a21\u7cca # \u63d0\u53d6\u5185\u6838\u533a\u57df\u4e2d\u503c \u53bb\u9664\u6912\u76d0\u566a\u58f0 median = cv . medianBlur ( img , 5 ) cv.bilateralFilter() \u5728\u53bb\u9664\u566a\u58f0\u7684\u540c\u65f6\u4fdd\u6301\u8fb9\u7f18\u6e05\u6670\u9510\u5229\u975e\u5e38\u6709\u6548 \u8fb9\u7f18\u68c0\u6d4b \u00b6 canny\u7b97\u6cd5(flag) \u5f3a\u5ea6\u68af\u5ea6\u5927\u4e8e maxVal \u7684\u4efb\u4f55\u8fb9\u7f18\u5fc5\u5b9a\u662f\u8fb9\u7f18\uff0c\u800c\u5c0f\u4e8e minVal \u7684\u90a3\u4e9b\u8fb9\u7f18\u5fc5\u5b9a\u662f\u975e\u8fb9\u7f18\uff0c\u56e0\u6b64\u5c06\u5176\u4e22\u5f03\u3002\u4ecb\u4e8e\u8fd9\u4e24\u4e2a\u9608\u503c\u4e4b\u95f4\u7684\u5bf9\u8c61\u6839\u636e\u5176\u8fde\u901a\u6027\u88ab\u5206\u7c7b\u4e3a\u8fb9\u7f18\u6216\u975e\u8fb9\u7f18\u3002\u5982\u679c\u5c06\u5b83\u4eec\u8fde\u63a5\u5230\u201c\u8fb9\u7f18\u201d\u50cf\u7d20\uff0c\u5219\u5c06\u5b83\u4eec\u89c6\u4e3a\u8fb9\u7f18\u7684\u4e00\u90e8\u5206 \u7531\u4e8e\u8fb9\u7f18\u68c0\u6d4b\u5bb9\u6613\u53d7\u5230\u56fe\u50cf\u4e2d\u566a\u58f0\u7684\u5f71\u54cd\uff0c\u56e0\u6b64\u7b2c\u4e00\u6b65\u662f\u4f7f\u75285x5\u9ad8\u65af\u6ee4\u6ce2\u5668\u6d88\u9664\u56fe\u50cf\u4e2d\u7684\u566a\u58f0\u3002 edges = cv . Canny ( img , 100 , 200 ) \u8f6e\u5ed3\u68c0\u6d4b \u00b6 \u8f6e\u5ed3\u53ef\u4ee5\u7b80\u5355\u5730\u89e3\u91ca\u4e3a\u8fde\u63a5\u5177\u6709\u76f8\u540c\u989c\u8272\u6216\u5f3a\u5ea6\u7684\u6240\u6709\u8fde\u7eed\u70b9\uff08\u6cbf\u8fb9\u754c\uff09\u7684\u66f2\u7ebf \u5728\u627e\u5230\u8f6e\u5ed3\u4e4b\u524d\uff0c\u8bf7\u5e94\u7528\u9608\u503c\u6216canny\u8fb9\u7f18\u68c0\u6d4b\u3002 ret , thresh = cv . threshold ( imgray , 127 , 255 , 0 ) #\u8fd4\u56decounter \u4e3atuple \u67d0\u4e00\u4e2a\u5143\u7d20\u5f62\u72b6\u4e3a(num,1,2) contours , hierarchy = cv . findContours ( thresh , cv . RETR_TREE , cv . CHAIN_APPROX_SIMPLE ) \u5728\u56fe\u50cf\u4e2d\u7ed8\u5236\u6240\u6709\u8f6e\u5ed3\uff1b-1\u662f\u7ed8\u5236\u6240\u6709\u8f6e\u5ed3\uff08\u7d22\u5f15\u53c2\u6570\uff09 cv . drawContours ( img , contours , - 1 , ( 0 , 255 , 0 ), 3 ) cnt = contours [ 4 ] #\u4f20list cv . drawContours ( img , [ cnt ], 0 , ( 0 , 255 , 0 ), 3 ) \u7279\u5f81\u77e9 contours , hierarchy = cv . findContours ( thresh , 1 , 2 ) cnt = contours [ 0 ] M = cv . moments ( cnt ) \u8f6e\u5ed3\u9762\u79ef area = cv . contourArea ( cnt ) \u8f6e\u5ed3\u5468\u957f # true \u95ed\u5408\u8f6e\u5ed3 perimeter = cv . arcLength ( cnt , True ) \u8f6e\u5ed3\u8fd1\u4f3c #\u8f6e\u5ed3\u5230\u8fd1\u4f3c\u8f6e\u5ed3\u7684\u6700\u5927\u8ddd\u79bb epsilon = 0.1 * cv . arcLength ( cnt , True ) approx = cv . approxPolyDP ( cnt , epsilon , True ) \u8f6e\u5ed3\u51f8\u5305 hull = cv . convexHull ( cnt ) #\u8981\u67e5\u627e\u51f8\u5ea6\u7f3a\u9677\uff0c\u5219\u9700\u8981\u4f20\u9012returnPoints = False #\u8fd4\u56de\u4e0e\u51f8\u5305\u70b9\u76f8\u5bf9\u5e94\u7684\u8f6e\u5ed3\u70b9\u7684\u7d22\u5f15 \u8fb9\u754c\u77e9\u5f62 \u76f4\u89d2\u77e9\u5f62 \u65cb\u8f6c\u77e9\u5f62 \uff08\u6700\u5c0f\u9762\u79ef\uff09 x , y , w , h = cv . boundingRect ( cnt ) cv . rectangle ( img ,( x , y ),( x + w , y + h ),( 0 , 255 , 0 ), 2 ) #\u8fd4\u56de\u4e00\u4e2aBox2D\u7ed3\u6784\uff0c\u4e2d\u5fc3(x,y)\uff0c(\u5bbd\u5ea6\uff0c\u9ad8\u5ea6)\uff0c\u65cb\u8f6c\u89d2\u5ea6 rect = cv . minAreaRect ( cnt ) box = cv . boxPoints ( rect ) box = np . int0 ( box ) cv . drawContours ( img ,[ box ], 0 ,( 0 , 0 , 255 ), 2 ) \u6700\u5c0f\u95ed\u5408\u5708 ( x , y ), radius = cv . minEnclosingCircle ( cnt ) \u62df\u5408\u692d\u5706 ellipse = cv . fitEllipse ( cnt ) cv . ellipse ( img , ellipse ,( 0 , 255 , 0 ), 2 ) \u62df\u5408\u76f4\u7ebf \u5176\u4ed6\u53c2\u6570 \u63a9\u7801\u548c\u50cf\u7d20\u70b9 \u6700\u5927\u503c\u6700\u5c0f\u503c\u4f4d\u7f6e \u5e73\u5747\u989c\u8272/\u5f3a\u5ea6 \u6781\u7aef\u70b9 maybe useful \u51f8\u6027\u7f3a\u9677 hull = cv . convexHull ( cnt , returnPoints = False ) defects = cv . convexityDefects ( cnt , hull ) \u8f6e\u5ed3\u5206\u5c42 [Next, Previous, First_Child, Parent] next \u4e3a\u540c\u4e00\u5c42\u6b21\u4e0b\u4e00\u8f6e\u5ed3\uff1b\u6ca1\u6709\u8bbe\u7f6e-1 RETR_LIST\uff1a\u6ca1\u6709\u7236\u5b50\u8f6e\u5ed3 RETR_EXTERNAL: \u53ea\u53d6\u5916\u90e8\u8f6e\u5ed3\uff1b RETR_CCOMP : \u68c0\u7d22\u6240\u6709\u8f6e\u5ed3\u5e76\u5c06\u5176\u6392\u5217\u4e3a2\u7ea7\u5c42\u6b21\u7ed3\u6784 RETR_TREE\uff1a \u5bb6\u65cf \u5085\u91cc\u53f6\u53d8\u6362\uff08flag) \u00b6 \u6a21\u677f\u5339\u914d \u00b6 \u970d\u592b\u53d8\u6362\uff08flag\uff09 \u00b6 \u56fe\u50cf\u5206\u5272\uff08flag\uff09 \u00b6 \u89c6\u9891 \u00b6 \u7b97\u672f\u8fd0\u7b97 \u00b6 \u56fe\u50cf\u52a0\u6cd5 \u00b6 \u4f7f\u7528cv.add or nummpy \u76f8\u52a0 opencv \u76f8\u52a0\u662f\u9971\u548c\uff0c numpy\u662f\u6a21\u8fd0\u7b97\uff0c\u76f4\u63a5\u52a0\uff0c\u663e\u7136\u4f1a\u6539\u53d8\u989c\u8272 \u6743\u91cd cv . addWeighted ( src1 , 0.5 , src2 , 0.5 ) \u7528\u4f5c\u56fe\u50cf\u878d\u5408\uff0c\u4f3c\u4e4e\u6709\u900f\u660e\u7684\u6548\u679c \u4f4d\u8fd0\u7b97 \u00b6 \u5176\u4ed6 \u00b6 cv2.convertScaleAbs \u00b6 \u8bbe\u7f6e\u8fb9\u6846 \u00b6 cv2 . copyMakeBorder ( src , width , .. , method ,( value )) \u5de5\u5177 \u00b6 pencil(to be modified) \u00b6 \u68c0\u6d4b\u9f20\u6807\u50cf\u7d20\u70b9\u7684rgb/hsv\u7b49\u989c\u8272\u50cf\u7d20\u503c\uff0c\u80fd\u7528\u9f20\u6807\u5728\u56fe\u50cf\u4e2d\u753b\u51fa\u5c01\u95ed\u8f6e\u5ed3\uff0c\u53ef\u4ee5\u6c42\u51fa\u8f6e\u5ed3\u7684\u9762\u79ef\u548c\u5468\u957f\u8981\u6c42\u663e\u793a\u5728\u63a7\u5236\u53f0\u6216\u56fe\u50cf\u5408\u9002\u7684\u4f4d\u7f6e import cv2 as cv import numpy as np def pencil ( image ): drawing = False show_mode = False show_rgb = True ix , iy = - 1 , - 1 points = [] img_copy = image . copy () def draw_contour ( event , x , y , flags , param ): nonlocal ix , iy , drawing , show_rgb , show_mode , points , img_copy if event == cv . EVENT_LBUTTONDOWN : if show_mode == True : rgb_pixel = img_copy [ y ][ x ][:] if show_rgb : color_value = rgb_pixel [:: - 1 ] color_text = 'RGB' else : color_value = cv . cvtColor ( np . uint8 ([[ rgb_pixel ]]), cv . COLOR_BGR2HSV ) color_text = 'HSV' text = f ' { color_text } : { color_value } ' text_size , _ = cv . getTextSize ( text , cv . FONT_HERSHEY_SIMPLEX , 0.5 , 1 ) box_x = x box_y = y - 20 - text_size [ 1 ] if box_y < 0 : box_y = y + 20 box_w = text_size [ 0 ] + 20 box_h = text_size [ 1 ] + 20 over_lay = img_copy . copy () cv . rectangle ( over_lay ,( box_x , box_y ), ( box_x + box_w , box_y + box_h ), ( 0 , 0 , 0 ), - 1 ) img_copy = cv . addWeighted ( over_lay , 0.5 , img_copy , 0.5 , 0 ) cv . putText ( img_copy , text , ( box_x + 10 , box_y + box_h - 10 ), cv . FONT_HERSHEY_SIMPLEX , 0.5 , ( 255 , 255 , 255 ), 2 , cv . LINE_AA ) else : drawing = True ix , iy = x , y points = [( x , y )] elif event == cv . EVENT_LBUTTONUP : drawing = False #points.append((x, y)) if len ( points ) >= 3 and show_mode == False : cv . polylines ( img_copy , np . array ([[ points [ - 1 ]] + [ points [ 0 ]]]), False , ( 0 , 255 , 0 ), 3 ) counter_area = cv . contourArea ( np . array ( points )) counter_perimeter = cv . arcLength ( np . array ( points ), True ) text = f \"s: { counter_area : .2f } p: { counter_perimeter : .2f } \" text_size , _ = cv . getTextSize ( text , cv . FONT_HERSHEY_SIMPLEX , 0.5 , 1 ) box_x = x box_y = y - 20 - text_size [ 1 ] if box_y < 0 : box_y = y + 20 box_w = text_size [ 0 ] + 20 box_h = text_size [ 1 ] + 20 over_lay = img_copy . copy () cv . rectangle ( over_lay ,( box_x , box_y ), ( box_x + box_w , box_y + box_h ), ( 0 , 0 , 0 ), - 1 ) img_copy = cv . addWeighted ( over_lay , 0.5 , img_copy , 0.5 , 0 ) cv . putText ( img_copy , text , ( box_x + 10 , box_y + box_h - 10 ), cv . FONT_HERSHEY_SIMPLEX , 0.5 , ( 255 , 255 , 255 ), 2 , cv . LINE_AA ) elif event == cv . EVENT_MOUSEMOVE : points . append (( x , y )) if drawing == True : cv . polylines ( img_copy , np . array ([ points ]), False , ( 0 , 255 , 0 ), 3 ) cv . namedWindow ( 'image' ) cv . setMouseCallback ( 'image' , draw_contour ) while True : cv . imshow ( 'image' , img_copy ) key = cv . waitKey ( 20 ) if key & 0xFF == 27 : break elif key == ord ( 't' ): # \u8f6c\u6362\u989c\u8272\u7a7a\u95f4 show_rgb = not show_rgb elif key == ord ( 'c' ): #clean img_copy = image . copy () elif key == ord ( 's' ): #show pixel and so on show_mode = not show_mode cv . destroyAllWindows ()","title":"opencv"},{"location":"open_cv/#opencv","text":"","title":"opencv"},{"location":"open_cv/#_1","text":"","title":"\u57fa\u672c"},{"location":"open_cv/#_2","text":"HSV\uff08Hue\uff0cSaturation\uff0cValue\uff09\u662f\u53e6\u4e00\u79cd\u8272\u5f69\u7a7a\u95f4\uff0c\u5176\u4e2d\u7684\u989c\u8272\u7ec4\u6210\u5143\u7d20\u66f4\u63a5\u8fd1\u4eba\u7c7b\u5bf9\u989c\u8272\u7684\u611f\u77e5\uff1a Hue\uff08\u8272\u8c03\uff09\uff1a\u8fd9\u662f\u6211\u4eec\u901a\u5e38\u610f\u4e49\u4e0a\u7684\u989c\u8272\u540d\u79f0\uff0c\u5982\u7ea2\u8272\u3001\u84dd\u8272\u7b49\u3002 Saturation\uff08\u9971\u548c\u5ea6\uff09\uff1a\u8fd9\u662f\u989c\u8272\u7684\u9c9c\u8273\u7a0b\u5ea6\uff0c\u989c\u8272\u4ece\u6700\u9c9c\u8273\u5230\u6700\u7070\u6697\u3002 Value\uff08\u4eae\u5ea6\uff09\uff1a\u989c\u8272\u4ece\u6700\u4eae\uff08\u767d\u8272\uff09\u5230\u6700\u6697\uff08\u9ed1\u8272\uff09 \u4e0d\u540c\u7684\u5e93\u7684H\uff0cS\uff0cV\u7684\u8868\u793a\u65b9\u5f0f\u548c\u8303\u56f4\u4e0d\u540c \u989c\u8272 H \u8303\u56f4 S \u8303\u56f4 V \u8303\u56f4 \u7ea2\u8272 0-10, 160-180 50-255 50-255 \u6a59\u8272 11-25 50-255 50-255 \u9ec4\u8272 26-35 50-255 50-255 \u7eff\u8272 36-85 50-255 50-255 \u9752\u8272 86-99 50-255 50-255 \u84dd\u8272 100-130 50-255 50-255 \u7d2b\u8272 131-159 50-255 50-255 \u767d\u8272 \u4e0d\u9002\u7528 0-40 200-255 \u9ed1\u8272 \u4e0d\u9002\u7528 0-255 0-50 \u4e0a\u56fe\u662fopencv\u7684\u5404\u4e2a\u989c\u8272hsv\u8303\u56f4\uff0c\u4e3aGPT4\u7ed9\u51fa\u3002\u51c6\u786e\u7684\u8303\u56f4\u672a\u8003\u8bc1\u3002 \u51e0\u79cd\u8868\u793a\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362; \u5728cv2\u4e2d\u5229\u7528 cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) \u4e4b\u7c7b\u7684\u65b9\u6cd5\u5373\u53ef\uff1b \u4eceBGR\u5230\u7070\u5ea6\u6216\u8005HSV\u7684\u8f6c\u6362\u662f\u901a\u9053\u52a0\u6743\u8f6c\u6362\uff0c\u5230\u4e86\u7070\u5ea6\u7531\u4e8e\u53ea\u6709\u4e00\u4e2a\u503c\uff0c\u4ece\u7070\u5ea6\u8f6c\u6362\u4e3aBGR\u4f1a\u628a\u8fd9\u4e2a\u503c\u590d\u5236\u62103\u4efd\u7ed9\u4e09\u4e2a\u901a\u9053\u3002 \u793a\u4f8b rgb_color = np.uint8([[[r, g, b]]]) hsv_color = cv2.cvtColor(rgb_color, cv2.COLOR_RGB2HSV)","title":"\u8868\u793a\u65b9\u6cd5"},{"location":"open_cv/#roi","text":"\u793a\u4f8b img [ 0 : 100 , :, :] \u6ce8\u610f\uff1a\u5bf9\u4e8e\u5750\u6807\u800c\u8a00\uff0cx\u6b63\u5411\u5411\u53f3\uff0cy\u6b63\u5411\u5411\u4e0b\uff1b\u4e0e\u884c\u5217\u4e0d\u5bf9\u5e94","title":"ROI"},{"location":"open_cv/#roi_1","text":"\u653e\u7f6elogo img1 = cv . imread ( 'messi5.jpg' ) img2 = cv . imread ( 'opencv-logo-white.png' ) # \u6211\u60f3\u628alogo\u653e\u5728\u5de6\u4e0a\u89d2\uff0c\u6240\u4ee5\u6211\u521b\u5efa\u4e86ROI rows , cols , channels = img2 . shape roi = img1 [ 0 : rows , 0 : cols ] # \u73b0\u5728\u521b\u5efalogo\u7684\u63a9\u7801\uff0c\u5e76\u540c\u65f6\u521b\u5efa\u5176\u76f8\u53cd\u63a9\u7801 img2gray = cv . cvtColor ( img2 , cv . COLOR_BGR2GRAY ) ret , mask = cv . threshold ( img2gray , 10 , 255 , cv . THRESH_BINARY ) mask_inv = cv . bitwise_not ( mask ) # \u73b0\u5728\u5c06ROI\u4e2dlogo\u7684\u533a\u57df\u6d82\u9ed1 img1_bg = cv . bitwise_and ( roi , roi , mask = mask_inv ) # \u4ec5\u4ecelogo\u56fe\u50cf\u4e2d\u63d0\u53d6logo\u533a\u57df img2_fg = cv . bitwise_and ( img2 , img2 , mask = mask ) # \u5c06logo\u653e\u5165ROI\u5e76\u4fee\u6539\u4e3b\u56fe\u50cf dst = cv . add ( img1_bg , img2_fg ) img1 [ 0 : rows , 0 : cols ] = dst","title":"ROI \u4e0e \u4f4d\u8fd0\u7b97"},{"location":"open_cv/#_3","text":"","title":"\u56fe\u50cf\u7ed8\u5236"},{"location":"open_cv/#cv2circle","text":"\u8be5\u51fd\u6570\u53ef\u4ee5\u5728\u7ed9\u5b9a\u56fe\u50cf\u4e0a\u7ed8\u5236\u4e00\u4e2a\u5706\u5f62\uff0c\u5e76\u6307\u5b9a\u5706\u5fc3\u3001\u534a\u5f84\u3001\u989c\u8272\u548c\u7ebf\u6761\u7c97\u7ec6\u7b49\u53c2\u6570\u3002 \u8bed\u6cd5\u5982\u4e0b cv2 . circle ( image , center , radius , color , thickness ) \u53c2\u6570\u89e3\u91ca\uff1a image : \u8981\u5728\u5176\u4e0a\u7ed8\u5236\u5706\u7684\u56fe\u50cf\u3002 center : \u5706\u5fc3\u7684\u5750\u6807 (x, y) \uff0c\u5176\u4e2d (x, y) \u662f\u6574\u6570\u503c\u3002 radius : \u5706\u7684\u534a\u5f84\uff0c\u4e3a\u6b63\u6574\u6570\u503c\u3002 color : \u5706\u7684\u989c\u8272\uff0c\u53ef\u4ee5\u662f\u5355\u4e2a\u6574\u6570\u503c\u3001\u5143\u7ec4 (B, G, R) \u6216\u8005 (B, G, R, A) \uff08\u5bf9\u4e8e\u5e26\u6709 alpha \u901a\u9053\u7684\u56fe\u50cf\uff09\u3002 thickness : \u7ebf\u6761\u7684\u7c97\u7ec6\uff0c\u9ed8\u8ba4\u4e3a1\uff0c \u8d1f\u6570\u503c\u8868\u793a\u586b\u5145\u6574\u4e2a\u5706","title":"cv2.circle"},{"location":"open_cv/#cv2rectangle","text":"OpenCV \u5e93\u4e2d\u7528\u4e8e\u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u77e9\u5f62\u7684\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u5728\u7ed9\u5b9a\u56fe\u50cf\u4e0a\u7ed8\u5236\u4e00\u4e2a\u77e9\u5f62\uff0c\u5e76\u6307\u5b9a\u77e9\u5f62\u7684\u4f4d\u7f6e\u3001\u989c\u8272\u548c\u7ebf\u6761\u7c97\u7ec6\u7b49\u53c2\u6570\u3002 \u8bed\u6cd5\uff1a cv2 . rectangle ( image , start_point , end_point , color , thickness ) \u53c2\u6570\u89e3\u91ca\uff1a start_point : \u77e9\u5f62\u7684\u5de6\u4e0a\u89d2\u70b9\u5750\u6807 (x, y) \uff0c\u5176\u4e2d (x, y) \u662f\u6574\u6570\u503c\u3002 end_point : \u77e9\u5f62\u7684\u53f3\u4e0b\u89d2\u70b9\u5750\u6807 (x, y) \uff0c\u5176\u4e2d (x, y) \u662f\u6574\u6570\u503c\u3002","title":"cv2.rectangle"},{"location":"open_cv/#_4","text":"import numpy as np import cv2 as cv drawing = False # \u5982\u679c\u6309\u4e0b\u9f20\u6807\uff0c\u5219\u4e3a\u771f mode = True ix , iy = - 1 , - 1 # \u9f20\u6807\u56de\u8c03\u51fd\u6570 def draw_circle ( event , x , y , flags , param ): global ix , iy , drawing , mode if event == cv . EVENT_LBUTTONDOWN : # \u6309\u4f4f\u9f20\u6807\u5de6 drawing = True ix , iy = x , y elif event == cv . EVENT_MOUSEMOVE : if drawing == True : if mode == True : cv . rectangle ( img ,( ix , iy ),( x , y ),( 0 , 255 , 0 ), 0 ) else : cv . circle ( img ,( x , y ), 10 ,( 0 , 0 , 255 ), - 1 ) elif event == cv . EVENT_LBUTTONUP : #\u677e\u5f00 drawing = False if mode == True : cv . rectangle ( img ,( ix , iy ),( x , y ),( 0 , 255 , 0 ), 0 ) else : cv . circle ( img ,( x , y ), 5 ,( 0 , 0 , 255 ), - 1 ) img = np . zeros (( 512 , 512 , 3 ), np . uint8 ) cv . namedWindow ( 'image' ) cv . setMouseCallback ( 'image' , draw_circle ) while ( 1 ): cv . imshow ( 'image' , img ) if cv . waitKey ( 20 ) & 0xFF == 27 : break cv . destroyAllWindows ()","title":"\u9f20\u6807\u4f5c\u4e3a\u753b\u7b14"},{"location":"open_cv/#_5","text":"","title":"\u5bf9\u8c61\u8ffd\u8e2a"},{"location":"open_cv/#hsv","text":"cv.inRange(src, lowrb, upperrb); \u8303\u56f4\u4e4b\u95f4 255 \u5426\u52190 \u793a\u4f8b # \u8f6c\u6362\u989c\u8272\u7a7a\u95f4 BGR \u5230 HSV hsv = cv . cvtColor ( frame , cv . COLOR_BGR2HSV ) # \u5b9a\u4e49HSV\u4e2d\u84dd\u8272\u7684\u8303\u56f4 lower_blue = np . array ([ 110 , 50 , 50 ]) upper_blue = np . array ([ 130 , 255 , 255 ]) # \u8bbe\u7f6eHSV\u7684\u9608\u503c\u4f7f\u5f97\u53ea\u53d6\u84dd\u8272 mask = cv . inRange ( hsv , lower_blue , upper_blue ) # \u5c06\u63a9\u819c\u548c\u56fe\u50cf\u9010\u50cf\u7d20\u76f8\u52a0 res = cv . bitwise_and ( frame , frame , mask = mask )","title":"hsv\u8ffd\u8e2a"},{"location":"open_cv/#_6","text":"\u7f29\u653e cv . resize ( src , dsize , fx , fy \uff0c interpolation ) # dsize = (width, height) \u200b cv.INTER_LINEAR \uff08\u7ebf\u6027\u63d2\u503c\uff0c\u8fd9\u4e5f\u662f\u9ed8\u8ba4\u503c\uff09\uff0c cv.INTER_NEAREST \uff08\u6700\u8fd1\u90bb\u63d2\u503c\uff09\uff0c cv.INTER_AREA \uff08\u533a\u57df\u63d2\u503c\uff0c\u7528\u4e8e\u56fe\u50cf\u7f29\u5c0f\uff09\uff0c cv.INTER_CUBIC \uff08\u7acb\u65b9\u63d2\u503c\uff0c\u7528\u4e8e\u56fe\u50cf\u653e\u5927\uff09\u7b49\u3002 \u5e73\u79fb rows , cols = img . shape M = np . float32 ([[ 1 , 0 , 100 ],[ 0 , 1 , 50 ]]) dst = cv . warpAffine ( img , M ,( cols , rows )) \u65cb\u8f6c # cols-1 \u548c rows-1 \u662f\u5750\u6807\u9650\u5236 M = cv . getRotationMatrix2D ((( cols - 1 ) / 2.0 ,( rows - 1 ) / 2.0 ), 90 , 1 ) dst = cv . warpAffine ( img , M ,( cols , rows )) \u4eff\u5c04\u53d8\u6362\uff1b\u4fdd\u6301\u5e73\u884c rows , cols , ch = img . shape pts1 = np . float32 ([[ 50 , 50 ],[ 200 , 50 ],[ 50 , 200 ]]) pts2 = np . float32 ([[ 10 , 100 ],[ 200 , 50 ],[ 100 , 250 ]]) #\u4e09\u4e2a\u70b9\u5bf9\u5e94\u4f4d\u7f6e M = cv . getAffineTransform ( pts1 , pts2 ) dst = cv . warpAffine ( img , M ,( cols , rows )) \u900f\u89c6\u53d8\u6362\uff1a\u9700\u8981\u56db\u4e2a\u70b9(\u4e09\u4e2a\u4e0d\u5e94\u8be5\u5171\u7ebf\uff09\uff0c\u4fdd\u6301\u76f4\u7ebf rows , cols , ch = img . shape pts1 = np . float32 ([[ 56 , 65 ],[ 368 , 52 ],[ 28 , 387 ],[ 389 , 390 ]]) pts2 = np . float32 ([[ 0 , 0 ],[ 300 , 0 ],[ 0 , 300 ],[ 300 , 300 ]]) M = cv . getPerspectiveTransform ( pts1 , pts2 ) dst = cv . warpPerspective ( img , M ,( 300 , 300 )) \u6d89\u53ca\u7ebf\u6027\u4ee3\u6570\u77e5\u8bc6\uff1a \u77e9\u9635\u53d8\u6362","title":"\u51e0\u4f55\u53d8\u6362"},{"location":"open_cv/#threshold","text":"cv.threshold cv . threshold ( src , thresh , maxval , type [, dst ]) \u2192 retval , dst \u200b cv.THRESH_TOZERO \uff1a\u5927\u4e8e\u9608\u503c \u4e0d\u53d8 cv.adaptiveThreshold \u81ea\u9002\u5e94 otsu (flag)","title":"threshold"},{"location":"open_cv/#_7","text":"\u4fb5\u8680\u7684\u57fa\u672c\u601d\u60f3\u5c31\u50cf\u571f\u58e4\u4fb5\u8680\u4e00\u6837\uff0c\u5b83\u4fb5\u8680\u524d\u666f\u7269\u4f53\u7684\u8fb9\u754c(\u5c3d\u91cf\u4f7f\u524d\u666f\u4fdd\u6301\u767d\u8272)\u3002\u5b83\u662f\u505a\u4ec0\u4e48\u7684\u5462?\u5185\u6838\u6ed1\u52a8\u901a\u8fc7\u56fe\u50cf(\u57282D\u5377\u79ef\u4e2d)\u3002\u539f\u59cb\u56fe\u50cf\u4e2d\u7684\u4e00\u4e2a\u50cf\u7d20(\u65e0\u8bba\u662f1\u8fd8\u662f0)\u53ea\u6709\u5f53\u5185\u6838\u4e0b\u7684\u6240\u6709\u50cf\u7d20\u90fd\u662f1\u65f6\u624d\u88ab\u8ba4\u4e3a\u662f1\uff0c\u5426\u5219\u5b83\u5c31\u4f1a\u88ab\u4fb5\u8680(\u53d8\u62100)\u3002 \u7ed3\u679c\u662f\uff0c\u6839\u636e\u5185\u6838\u7684\u5927\u5c0f\uff0c\u8fb9\u754c\u9644\u8fd1\u7684\u6240\u6709\u50cf\u7d20\u90fd\u4f1a\u88ab\u4e22\u5f03 kernel = np . ones (( 5 , 5 ), np . uint8 ) erosion = cv . erode ( img , kernel , iterations = 1 ) \u81a8\u80c0\u6b63\u597d\u76f8\u53cd\uff0c\u5982\u679c\u5185\u6838\u4e0b\u7684\u81f3\u5c11\u4e00\u4e2a\u50cf\u7d20\u4e3a\u201c 1\u201d\uff0c\u5219\u50cf\u7d20\u5143\u7d20\u4e3a\u201c 1\u201d\u3002\u56e0\u6b64\uff0c\u5b83\u4f1a\u589e\u52a0\u56fe\u50cf\u4e2d\u7684\u767d\u8272\u533a\u57df\u6216\u589e\u52a0\u524d\u666f\u5bf9\u8c61\u7684\u5927\u5c0f\u3002\u901a\u5e38\uff0c\u5728\u6d88\u9664\u566a\u97f3\u7684\u60c5\u51b5\u4e0b\uff0c\u8150\u8680\u540e\u4f1a\u81a8\u80c0\u3002\u56e0\u4e3a\u8150\u8680\u4f1a\u6d88\u9664\u767d\u566a\u58f0\uff0c\u4f46\u4e5f\u4f1a\u7f29\u5c0f\u7269\u4f53\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5bf9\u5176\u8fdb\u884c\u4e86\u6269\u5c55\u3002\u7531\u4e8e\u566a\u97f3\u6d88\u5931\u4e86\uff0c\u5b83\u4eec\u4e0d\u4f1a\u56de\u6765\uff0c\u4f46\u662f\u6211\u4eec\u7684\u76ee\u6807\u533a\u57df\u589e\u52a0\u4e86\u3002\u5728\u8fde\u63a5\u5bf9\u8c61\u7684\u635f\u574f\u90e8\u5206\u65f6\u4e5f\u5f88\u6709\u7528\u3002 dilation = cv . dilate ( img , kernel , iterations = 1 ) \u5148\u8150\u8680\u540e\u81a8\u80c0\uff0c\u6d88\u9664\u566a\u97f3 opening = cv . morphologyEx ( img , cv . MORPH_OPEN , kernel ) \u5148\u81a8\u80c0\u540e\u8150\u8680\uff0c\u5728\u5173\u95ed\u524d\u666f\u5bf9\u8c61\u5185\u90e8\u7684\u5c0f\u5b54\u6216\u5bf9\u8c61\u4e0a\u7684\u5c0f\u9ed1\u70b9\u65f6\u5f88\u6709\u7528\u3002 closing = cv . morphologyEx ( img , cv . MORPH_CLOSE , kernel ) \u4e0d\u540c\u5f62\u72b6\u5185\u6838 cv . getStructuringElement ( cv . MORPH_RECT ,( 5 , 5 )) # \u692d\u5706 cv . getStructuringElement ( cv . MORPH_ELLIPSE ,( 5 , 5 )) cv . getStructuringElement ( cv . MORPH_CROSS ,( 5 , 5 ))","title":"\u8150\u8680\u4e0e\u81a8\u80c0"},{"location":"open_cv/#_8","text":"\u68af\u5ea6\u6ee4\u6ce2\u5668\u6216\u9ad8\u901a\u6ee4\u6ce2\u5668(flag) laplacian = cv . Laplacian ( img , cv . CV_64F ) sobelx = cv . Sobel ( img , cv . CV_64F , 1 , 0 , ksize = 5 ) sobely = cv . Sobel ( img , cv . CV_64F , 0 , 1 , ksize = 5 )","title":"\u56fe\u50cf\u68af\u5ea6"},{"location":"open_cv/#_9","text":"cv.filter2D \u8fc7\u6ee4 kernel = np . ones (( 5 , 5 ), np . float32 ) / 25 dst = cv . filter2D ( img , - 1 , kernel ) # -1 \u8868\u793a\u4e0e\u56fe\u50cf\u540c\u6837\u6df1\u5ea6 \u6a21\u7cca blur = cv . blur ( img ,( 5 , 5 )) #\u5185\u68385*5 blur = cv . GaussianBlur ( img ,( 5 , 5 ), 0 ) #\u6807\u51c6\u5dee \u9ad8\u65af\u6a21\u7cca # \u63d0\u53d6\u5185\u6838\u533a\u57df\u4e2d\u503c \u53bb\u9664\u6912\u76d0\u566a\u58f0 median = cv . medianBlur ( img , 5 ) cv.bilateralFilter() \u5728\u53bb\u9664\u566a\u58f0\u7684\u540c\u65f6\u4fdd\u6301\u8fb9\u7f18\u6e05\u6670\u9510\u5229\u975e\u5e38\u6709\u6548","title":"\u56fe\u50cf\u5e73\u6ed1"},{"location":"open_cv/#_10","text":"canny\u7b97\u6cd5(flag) \u5f3a\u5ea6\u68af\u5ea6\u5927\u4e8e maxVal \u7684\u4efb\u4f55\u8fb9\u7f18\u5fc5\u5b9a\u662f\u8fb9\u7f18\uff0c\u800c\u5c0f\u4e8e minVal \u7684\u90a3\u4e9b\u8fb9\u7f18\u5fc5\u5b9a\u662f\u975e\u8fb9\u7f18\uff0c\u56e0\u6b64\u5c06\u5176\u4e22\u5f03\u3002\u4ecb\u4e8e\u8fd9\u4e24\u4e2a\u9608\u503c\u4e4b\u95f4\u7684\u5bf9\u8c61\u6839\u636e\u5176\u8fde\u901a\u6027\u88ab\u5206\u7c7b\u4e3a\u8fb9\u7f18\u6216\u975e\u8fb9\u7f18\u3002\u5982\u679c\u5c06\u5b83\u4eec\u8fde\u63a5\u5230\u201c\u8fb9\u7f18\u201d\u50cf\u7d20\uff0c\u5219\u5c06\u5b83\u4eec\u89c6\u4e3a\u8fb9\u7f18\u7684\u4e00\u90e8\u5206 \u7531\u4e8e\u8fb9\u7f18\u68c0\u6d4b\u5bb9\u6613\u53d7\u5230\u56fe\u50cf\u4e2d\u566a\u58f0\u7684\u5f71\u54cd\uff0c\u56e0\u6b64\u7b2c\u4e00\u6b65\u662f\u4f7f\u75285x5\u9ad8\u65af\u6ee4\u6ce2\u5668\u6d88\u9664\u56fe\u50cf\u4e2d\u7684\u566a\u58f0\u3002 edges = cv . Canny ( img , 100 , 200 )","title":"\u8fb9\u7f18\u68c0\u6d4b"},{"location":"open_cv/#_11","text":"\u8f6e\u5ed3\u53ef\u4ee5\u7b80\u5355\u5730\u89e3\u91ca\u4e3a\u8fde\u63a5\u5177\u6709\u76f8\u540c\u989c\u8272\u6216\u5f3a\u5ea6\u7684\u6240\u6709\u8fde\u7eed\u70b9\uff08\u6cbf\u8fb9\u754c\uff09\u7684\u66f2\u7ebf \u5728\u627e\u5230\u8f6e\u5ed3\u4e4b\u524d\uff0c\u8bf7\u5e94\u7528\u9608\u503c\u6216canny\u8fb9\u7f18\u68c0\u6d4b\u3002 ret , thresh = cv . threshold ( imgray , 127 , 255 , 0 ) #\u8fd4\u56decounter \u4e3atuple \u67d0\u4e00\u4e2a\u5143\u7d20\u5f62\u72b6\u4e3a(num,1,2) contours , hierarchy = cv . findContours ( thresh , cv . RETR_TREE , cv . CHAIN_APPROX_SIMPLE ) \u5728\u56fe\u50cf\u4e2d\u7ed8\u5236\u6240\u6709\u8f6e\u5ed3\uff1b-1\u662f\u7ed8\u5236\u6240\u6709\u8f6e\u5ed3\uff08\u7d22\u5f15\u53c2\u6570\uff09 cv . drawContours ( img , contours , - 1 , ( 0 , 255 , 0 ), 3 ) cnt = contours [ 4 ] #\u4f20list cv . drawContours ( img , [ cnt ], 0 , ( 0 , 255 , 0 ), 3 ) \u7279\u5f81\u77e9 contours , hierarchy = cv . findContours ( thresh , 1 , 2 ) cnt = contours [ 0 ] M = cv . moments ( cnt ) \u8f6e\u5ed3\u9762\u79ef area = cv . contourArea ( cnt ) \u8f6e\u5ed3\u5468\u957f # true \u95ed\u5408\u8f6e\u5ed3 perimeter = cv . arcLength ( cnt , True ) \u8f6e\u5ed3\u8fd1\u4f3c #\u8f6e\u5ed3\u5230\u8fd1\u4f3c\u8f6e\u5ed3\u7684\u6700\u5927\u8ddd\u79bb epsilon = 0.1 * cv . arcLength ( cnt , True ) approx = cv . approxPolyDP ( cnt , epsilon , True ) \u8f6e\u5ed3\u51f8\u5305 hull = cv . convexHull ( cnt ) #\u8981\u67e5\u627e\u51f8\u5ea6\u7f3a\u9677\uff0c\u5219\u9700\u8981\u4f20\u9012returnPoints = False #\u8fd4\u56de\u4e0e\u51f8\u5305\u70b9\u76f8\u5bf9\u5e94\u7684\u8f6e\u5ed3\u70b9\u7684\u7d22\u5f15 \u8fb9\u754c\u77e9\u5f62 \u76f4\u89d2\u77e9\u5f62 \u65cb\u8f6c\u77e9\u5f62 \uff08\u6700\u5c0f\u9762\u79ef\uff09 x , y , w , h = cv . boundingRect ( cnt ) cv . rectangle ( img ,( x , y ),( x + w , y + h ),( 0 , 255 , 0 ), 2 ) #\u8fd4\u56de\u4e00\u4e2aBox2D\u7ed3\u6784\uff0c\u4e2d\u5fc3(x,y)\uff0c(\u5bbd\u5ea6\uff0c\u9ad8\u5ea6)\uff0c\u65cb\u8f6c\u89d2\u5ea6 rect = cv . minAreaRect ( cnt ) box = cv . boxPoints ( rect ) box = np . int0 ( box ) cv . drawContours ( img ,[ box ], 0 ,( 0 , 0 , 255 ), 2 ) \u6700\u5c0f\u95ed\u5408\u5708 ( x , y ), radius = cv . minEnclosingCircle ( cnt ) \u62df\u5408\u692d\u5706 ellipse = cv . fitEllipse ( cnt ) cv . ellipse ( img , ellipse ,( 0 , 255 , 0 ), 2 ) \u62df\u5408\u76f4\u7ebf \u5176\u4ed6\u53c2\u6570 \u63a9\u7801\u548c\u50cf\u7d20\u70b9 \u6700\u5927\u503c\u6700\u5c0f\u503c\u4f4d\u7f6e \u5e73\u5747\u989c\u8272/\u5f3a\u5ea6 \u6781\u7aef\u70b9 maybe useful \u51f8\u6027\u7f3a\u9677 hull = cv . convexHull ( cnt , returnPoints = False ) defects = cv . convexityDefects ( cnt , hull ) \u8f6e\u5ed3\u5206\u5c42 [Next, Previous, First_Child, Parent] next \u4e3a\u540c\u4e00\u5c42\u6b21\u4e0b\u4e00\u8f6e\u5ed3\uff1b\u6ca1\u6709\u8bbe\u7f6e-1 RETR_LIST\uff1a\u6ca1\u6709\u7236\u5b50\u8f6e\u5ed3 RETR_EXTERNAL: \u53ea\u53d6\u5916\u90e8\u8f6e\u5ed3\uff1b RETR_CCOMP : \u68c0\u7d22\u6240\u6709\u8f6e\u5ed3\u5e76\u5c06\u5176\u6392\u5217\u4e3a2\u7ea7\u5c42\u6b21\u7ed3\u6784 RETR_TREE\uff1a \u5bb6\u65cf","title":"\u8f6e\u5ed3\u68c0\u6d4b"},{"location":"open_cv/#flag","text":"","title":"\u5085\u91cc\u53f6\u53d8\u6362\uff08flag)"},{"location":"open_cv/#_12","text":"","title":"\u6a21\u677f\u5339\u914d"},{"location":"open_cv/#flag_1","text":"","title":"\u970d\u592b\u53d8\u6362\uff08flag\uff09"},{"location":"open_cv/#flag_2","text":"","title":"\u56fe\u50cf\u5206\u5272\uff08flag\uff09"},{"location":"open_cv/#_13","text":"","title":"\u89c6\u9891"},{"location":"open_cv/#_14","text":"","title":"\u7b97\u672f\u8fd0\u7b97"},{"location":"open_cv/#_15","text":"\u4f7f\u7528cv.add or nummpy \u76f8\u52a0 opencv \u76f8\u52a0\u662f\u9971\u548c\uff0c numpy\u662f\u6a21\u8fd0\u7b97\uff0c\u76f4\u63a5\u52a0\uff0c\u663e\u7136\u4f1a\u6539\u53d8\u989c\u8272 \u6743\u91cd cv . addWeighted ( src1 , 0.5 , src2 , 0.5 ) \u7528\u4f5c\u56fe\u50cf\u878d\u5408\uff0c\u4f3c\u4e4e\u6709\u900f\u660e\u7684\u6548\u679c","title":"\u56fe\u50cf\u52a0\u6cd5"},{"location":"open_cv/#_16","text":"","title":"\u4f4d\u8fd0\u7b97"},{"location":"open_cv/#_17","text":"","title":"\u5176\u4ed6"},{"location":"open_cv/#cv2convertscaleabs","text":"","title":"cv2.convertScaleAbs"},{"location":"open_cv/#_18","text":"cv2 . copyMakeBorder ( src , width , .. , method ,( value ))","title":"\u8bbe\u7f6e\u8fb9\u6846"},{"location":"open_cv/#_19","text":"","title":"\u5de5\u5177"},{"location":"open_cv/#pencilto-be-modified","text":"\u68c0\u6d4b\u9f20\u6807\u50cf\u7d20\u70b9\u7684rgb/hsv\u7b49\u989c\u8272\u50cf\u7d20\u503c\uff0c\u80fd\u7528\u9f20\u6807\u5728\u56fe\u50cf\u4e2d\u753b\u51fa\u5c01\u95ed\u8f6e\u5ed3\uff0c\u53ef\u4ee5\u6c42\u51fa\u8f6e\u5ed3\u7684\u9762\u79ef\u548c\u5468\u957f\u8981\u6c42\u663e\u793a\u5728\u63a7\u5236\u53f0\u6216\u56fe\u50cf\u5408\u9002\u7684\u4f4d\u7f6e import cv2 as cv import numpy as np def pencil ( image ): drawing = False show_mode = False show_rgb = True ix , iy = - 1 , - 1 points = [] img_copy = image . copy () def draw_contour ( event , x , y , flags , param ): nonlocal ix , iy , drawing , show_rgb , show_mode , points , img_copy if event == cv . EVENT_LBUTTONDOWN : if show_mode == True : rgb_pixel = img_copy [ y ][ x ][:] if show_rgb : color_value = rgb_pixel [:: - 1 ] color_text = 'RGB' else : color_value = cv . cvtColor ( np . uint8 ([[ rgb_pixel ]]), cv . COLOR_BGR2HSV ) color_text = 'HSV' text = f ' { color_text } : { color_value } ' text_size , _ = cv . getTextSize ( text , cv . FONT_HERSHEY_SIMPLEX , 0.5 , 1 ) box_x = x box_y = y - 20 - text_size [ 1 ] if box_y < 0 : box_y = y + 20 box_w = text_size [ 0 ] + 20 box_h = text_size [ 1 ] + 20 over_lay = img_copy . copy () cv . rectangle ( over_lay ,( box_x , box_y ), ( box_x + box_w , box_y + box_h ), ( 0 , 0 , 0 ), - 1 ) img_copy = cv . addWeighted ( over_lay , 0.5 , img_copy , 0.5 , 0 ) cv . putText ( img_copy , text , ( box_x + 10 , box_y + box_h - 10 ), cv . FONT_HERSHEY_SIMPLEX , 0.5 , ( 255 , 255 , 255 ), 2 , cv . LINE_AA ) else : drawing = True ix , iy = x , y points = [( x , y )] elif event == cv . EVENT_LBUTTONUP : drawing = False #points.append((x, y)) if len ( points ) >= 3 and show_mode == False : cv . polylines ( img_copy , np . array ([[ points [ - 1 ]] + [ points [ 0 ]]]), False , ( 0 , 255 , 0 ), 3 ) counter_area = cv . contourArea ( np . array ( points )) counter_perimeter = cv . arcLength ( np . array ( points ), True ) text = f \"s: { counter_area : .2f } p: { counter_perimeter : .2f } \" text_size , _ = cv . getTextSize ( text , cv . FONT_HERSHEY_SIMPLEX , 0.5 , 1 ) box_x = x box_y = y - 20 - text_size [ 1 ] if box_y < 0 : box_y = y + 20 box_w = text_size [ 0 ] + 20 box_h = text_size [ 1 ] + 20 over_lay = img_copy . copy () cv . rectangle ( over_lay ,( box_x , box_y ), ( box_x + box_w , box_y + box_h ), ( 0 , 0 , 0 ), - 1 ) img_copy = cv . addWeighted ( over_lay , 0.5 , img_copy , 0.5 , 0 ) cv . putText ( img_copy , text , ( box_x + 10 , box_y + box_h - 10 ), cv . FONT_HERSHEY_SIMPLEX , 0.5 , ( 255 , 255 , 255 ), 2 , cv . LINE_AA ) elif event == cv . EVENT_MOUSEMOVE : points . append (( x , y )) if drawing == True : cv . polylines ( img_copy , np . array ([ points ]), False , ( 0 , 255 , 0 ), 3 ) cv . namedWindow ( 'image' ) cv . setMouseCallback ( 'image' , draw_contour ) while True : cv . imshow ( 'image' , img_copy ) key = cv . waitKey ( 20 ) if key & 0xFF == 27 : break elif key == ord ( 't' ): # \u8f6c\u6362\u989c\u8272\u7a7a\u95f4 show_rgb = not show_rgb elif key == ord ( 'c' ): #clean img_copy = image . copy () elif key == ord ( 's' ): #show pixel and so on show_mode = not show_mode cv . destroyAllWindows ()","title":"pencil(to be modified)"}]}